{\rtf1\ansi\ansicpg1252\cocoartf1671
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11560\viewh15040\viewkind1
\deftab720
\pard\pardeftab720\ri0\sl276\slmult1\sa200\partightenfactor0

\f0\fs22 \cf0 We will use Python to analyse networks. \
-----------------------------\
Lecture 2: Modelling Networks\
Preamble: it is helpful to use models to study real networks, but we need to consider whether our models have the same features as real networks.\
One simple feature of a network is the degrees of the nodes.  The degree of a node is just the number of incident links --- one can also think of in-degree and out-degree if the links are directed either towards or away from the node.  We will look at the degrees of a real network and of a simple model.\
-----------------------------\
Look at na2degrees.py.  \
The EXAMPLE shows how we will define graphs and digraphs.\
Understand the two functions.  Test this by using them to answer the following questions:\
-- what is the in-degree of node 3?\
-- how many nodes have in-degree 1?\
-----------------------------\
We are going to analyse the structure of graphs generated by citation patterns from scientific papers. \
Each scientific paper cites many other papers.  The question is: are the cited papers chosen randomly or is there some "hidden pattern"? (Well, obviously they're not chosen randomly, but can we tell that just by looking at network structure.)\
We represent the citation data as a directed graph (a citation graph) in which the nodes correspond to papers, and there is an edge from node i to node j if the paper corresponding to node i cites the paper corresponding to node j. \
As we're interested in understanding how papers get cited, we analyse the in-degree distribution of a specific graph.  Then we will, eventually, contrast it to those of graphs generated by two different random processes. \
A citation network is given in the file alg_phys-cite.txt.  Each line of the file corresponds to a paper.  The first item is an identifier for the paper.  The others are identifiers for the papers that it cites.  Save the file.\
Look at na2loadgraph.py.  It loads the file and creates the network as a digraph.\
Combining everything you have seen, create objects called citation_in_degrees and citation_distribution that describe the nodes' in-degrees and the in-degree distribution of the citations network.\
How many papers are cited just once?  Which paper is cited the most and how many times is it cited?\
-----------------------------\
We would like to visualise this distribution.\
First note that working with normalised distributions is better (so we can compare networks of different sizes).\
Look at na2plot_in-degrees.py.  (At the top are functions from the above files and answers to some of the questions.)\
normalized_citations_distribution is created by simply dividing by the number of nodes.\
The remainder of the code creates na2.png that contains a plot of the distribution.\
Look at the plot (note the logarithmic scale).  This, in essence, provides a signature of the network.  So if we have a network model that we claim we can use to investigate this kind of network, then it should have a similar distribution.\
-----------------------------\
We are going to look at the random graph model.  A random graph is defined by two numbers, the number of nodes and the probability that there is a link from one node to another.\
Look at na2random.py which has code to create a random graph.\
Create a random graph on 1000 vertices with prob=0.1 and plot the normalised in_degree distribution.  (If a logarithmic plot is not appropriate replace plt.loglog with plt.plot.)\
Compare with the previous plot.  Are random graphs a good model for citation networks?\
\
}